pipeline {
    agent any
    parameters {
        string(name: 'Dockerfile', defaultValue: 'app/py-sample/deploy/Dockerfile', description: 'Dockerfile path for buildning the app')
        string(name: 'SqProject', defaultValue: 'devsecops-test-personal', description: 'SQ project key based on your project')
        string(name: 'SqServer', defaultValue: 'https://student00.lab.i-3.my.id:9000', description: 'SQ server address')
        string(name: 'ImageRegistry', defaultValue: 'registry.i-3.my.id:5000', description: 'Image Registry address')
        string(name: 'OcpCluster', defaultValue: 'https://api.lab.i3datacenter.my.id:6443', description: 'Openshift Cluster API')
        string(name: 'ocpProject', defaultValue: 'devsecops-demo', description: 'Project where app to be deployed')
        string(name: 'manifestFile', defaultValue: 'app/py-sample/deploy/manifest/dev-deployment.yaml', description: 'Path of manifest file to be deployed') 
        string(name: 'appEndpoint', defaultValue: 'gosip-app-dev.apps.lab.i3datacenter.my.id', description: 'Application address that exposed by route for Dynamic Application Security Test')    
    }
    environment {
        REGISTRY_CRED = credentials('instructor-registry-cred')
        CLUSTER_TKN = credentials('instructor-deployer-tkn1')
        SQ_TKN= credentials('instructor-sq-tkn')
    }
    stages {
        stage('Sonarqube - Static application security testing process') {
            steps {
                sh 'cd app/py-sample/'
                sh 'sonar-scanner \
                    -Dsonar.projectKey=$SqProject \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=$SqServer \
                    -Dsonar.login=$SQ_TKN'      
            }
        }
        stage('Build Container Image') {
            steps {
                sh('docker image rm $ImageRegistry/devsecops:v${BUILD_NUMBER} || echo "No existing image found"')
                sh('docker build --no-cache -t $ImageRegistry/devsecops:v${BUILD_NUMBER} -f $Dockerfile app/py-sample')
            }
        }
        stage('Trivy - Container security scan') {
            steps {
                sh('cd app/py-sample/deploy')
                sh('touch /tmp/pipeline-report/trivy-pipeline${BUILD_NUMBER}-report.html')
                sh('trivy image --format template --template "@/usr/local/share/trivy/templates/html.tpl" -o /tmp/pipeline-report/trivy-pipeline${BUILD_NUMBER}-report.html --exit-code 0 --severity HIGH,CRITICAL ${ImageRegistry}/devsecops:v${BUILD_NUMBER}')
            }
        }
        stage('Push Image to nexus') {
            steps {
                sh('echo "$REGISTRY_CRED_PSW" | docker login $ImageRegistry -u $REGISTRY_CRED_USR --password-stdin')
                sh('docker push $ImageRegistry/instructor/devsecops:v${BUILD_NUMBER}')
                sh('docker rmi $ImageRegistry/instructor/devsecops:v${BUILD_NUMBER}') 
            }
        }
        stage('Deploy app to Staging env') {
            steps {
                sh('oc login  --token=$CLUSTER_TKN --server=$OcpCluster')
                sh('oc project $ocpProject && oc create -f $manifestFile')
            }
        }
        stage("Zap Proxy - Dynamic application security testing process") {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    sh '''
                    docker run --rm --network=host --user root -v $(pwd):/zap/wrk:rw -v /tmp/zaphost/hosts:/etc/hosts -t owasp/zap2docker-stable zap-baseline.py \
                    	-t http://$appEndpoint \
                    	-r reportzap.html \
                    	-g reportzap.conf \
                    	--hook=/zap/auth_hook.py \
                    	-z "auth.loginurl=http://$appEndpoint/login \
                    			auth.username="user" \
                    			auth.password="password""
                    '''
                }
            }
        }
        stage('Clean up cred') {
            steps {
                sh('docker logout')
                sh('oc logout')
            }
        }
    }
}